

from clases.Vista.view_WidgetDrawMenuPointMaterial import ViewWidgetDrawMenuPointMaterial
from clases.Modelo.model_ProjectCurrent import ModelProjectCurrentOK
from clases.Controlador.controller_CardMaterialPoint import ControllerCardMaterialPoint
from PySide6.QtCore import (Slot)

class ControllerMenuPointMaterial():

    def __init__(self) -> None:

        self.view_menu_pointMaterial = ViewWidgetDrawMenuPointMaterial()
        self.list_controller_card=[]

        self.__config()
        self.__initEvent()


    ###############################################################################
	# ::::::::::::::::::::         MÉTODOS CONFIGURAR        ::::::::::::::::::::
	###############################################################################

    def __config(self):
        self.setListBaseMeshView()
        self.setBaseMeshView()
        self.setListNoPointsView()
        self.setNoPointsView()

    def __initEvent(self):
        """ Asigna las ranuras (Slot) a las señales (Signal). """ 
        self.view_menu_pointMaterial.signal_new_points_material.connect(self.newPointsMaterial)


    ###############################################################################
	# ::::::::::::::::::::         MÉTODOS  SIGNAL/SLOT        ::::::::::::::::::::
	###############################################################################
   
    @Slot(list)
    def showHideMaterialPoint(self, data):
        print("showHideMesh >>>>")
        return
        name_mesh = data[0]
        value = data[1]
        for mesh in self.meshs:
            
            if name_mesh == mesh.getName():
                mesh.setVisible(value)   

    @Slot(str)
    def deleteMaterialPoint(self, id):
        self.model_current_project.deleteMaterialPoint(id)

    @Slot()
    def newPointsMaterial(self):

        point_material_name = self.view_menu_pointMaterial.getName()
        point_material_color = self.view_menu_pointMaterial.getColor()
        point_material_id_base_mesh, point_material_base_mesh = self.view_menu_pointMaterial.getBaseMesh()
        point_material_no_points = self.view_menu_pointMaterial.getNoPoints()

        if point_material_name == "":
            self.view_menu_pointMaterial.msnAlertName(True, "Revisa el nombre de los puntos materiales")
            return     
        else:
            self.view_menu_pointMaterial.msnAlertName(False)

        

        if point_material_color == None:
            self.view_menu_pointMaterial.msnAlertColor(True, "Revisa el color de los puntos materiales")
            return     
        else:
            self.view_menu_pointMaterial.msnAlertColor(False)
        
        
        if point_material_base_mesh == "":
            self.view_menu_pointMaterial.msnAlertBaseMesh(True, "Selecciona una malla base")
            
            return     
        else:
            self.view_menu_pointMaterial.msnAlertBaseMesh(False)
        
    
        
        if point_material_no_points == "":
            self.view_menu_pointMaterial.msnAlertNoPoints(True, "Selecciona la cantidad de puntos por elemento")
            return     
        else:
            self.view_menu_pointMaterial.msnAlertNoPoints(False)
        
        print("esto toca cambiarlo con la verdadera lista ↓↓↓↓") 
        coordenates_triangles = [[19.83037775327739, 5.083209338442088], [30.0, 4.204212369446735], [30.0, 10.0], [20.0, 9.999999999999998], 
                    [0.0, 9.999999999999998], [0.0, 8.070497189534004], [1.749193729521721, 8.002229856561598], [5.8522322086244, 5.152709942219985],
                    [9.468468510246794, 4.38820468367794], [15.31008080397214, 5.500212269602002], [18.64814604994808, 7.585226925401684], 
                    [20.754888866598183, 5.003300523080397], [21.67939997992098, 4.923391707718533], [22.60391109325768, 4.8434828923554685], 
                    [23.528422206600517, 4.763574076991873], [24.452933319943348, 4.683665261628278], [25.377444433285905, 4.603756446264706],
                    [26.301955546628662, 4.523847630901117], [27.226466659971496, 4.443938815537521], [28.15097777331433, 4.364030000173926],
                    [29.075488886657162, 4.28412118481033], [30.0, 5.17017697453831], [30.0, 6.136141579624452], [30.0, 7.102106184713657],
                    [30.0, 8.068070789808761], [30.0, 9.03403539490687], [28.999999999999996, 10.0], [27.999999999999996, 10.0], 
                    [26.999999999999993, 10.0], [25.999999999999993, 10.0], [24.99999999999999, 9.999999999999998],
                    [23.999999999999986, 9.999999999999998], [22.999999999999986, 9.999999999999998], [21.999999999999982, 9.999999999999998], 
                    [20.999999999999993, 9.999999999999998], [18.999999999999996, 9.999999999999998], [17.999999999999996, 9.999999999999998], 
                    [16.999999999999993, 9.999999999999998], [15.999999999999991, 9.999999999999998], [14.99999999999999, 9.999999999999998],
                    [13.999999999999988, 9.999999999999998], [12.999999999999986, 9.999999999999998], [11.999999999999982, 9.999999999999998],
                    [10.99999999999998, 9.999999999999998], [9.999999999999979, 9.999999999999998], [8.999999999999977, 9.999999999999998],
                    [7.999999999999975, 9.999999999999998], [6.999999999999973, 9.999999999999998], [5.99999999999997, 9.999999999999998], [4.999999999999968, 9.999999999999998], [3.9999999999999645, 9.999999999999998], [2.999999999999975, 9.999999999999998], [1.9999999999999822, 9.999999999999998], [0.9999999999999929, 9.999999999999998], [0.0, 9.035248594770126], [0.8745968647586007, 8.03636352304789], [2.569801425340019, 7.43232587369483], [3.3904091211575436, 6.862421890828599], [4.211016816978182, 6.292517907960205], [5.031624512801697, 5.722613925089814], [6.756291284037408, 4.9615836275829075], [7.660350359452489, 4.770457312945392], [8.564409434854653, 4.579330998310606], [10.442070559194125, 4.573539281330638], [11.415672608148487, 4.758873878984675], [12.389274657102849, 4.944208476638711], [13.362876706057719, 5.129543074292845], [14.336478755017778, 5.314877671947966], [16.144597115472873, 6.021465933556137], [16.979113426975086, 6.542719597511198], [17.81362973846911, 7.063973261461142], [19.042223284389134, 6.751221063086154], [19.436300518833608, 5.917215200763384], [26.787521080870636, 5.168226266941149], [9.499999999999979, 9.133974596215559], [24.059880827363124, 5.524269779545882], [7.391056719174909, 5.651234134592092], [21.388329308149117, 5.802053137604799], [11.444103285255245, 9.198189365380536], [25.488547881613094, 9.13162297941935], [29.10434367366504, 7.485897813989802], [9.18508154696488, 5.1972631350083205], [13.6711711394214, 6.008558496041838], [22.493755870360037, 9.134878516083354], [6.326322223809847, 9.12034215787087], [11.741969162857105, 5.694705285382752], [19.567454930839006, 7.509504890322984], [16.15251071650798, 7.055612925145408], [13.533714697189282, 9.152527620771302], [4.296152295836065, 7.287189733075476], [27.472765643452846, 9.129618472087675], [15.501559431309474, 9.135048663831087], [17.72527647886146, 8.018964521599148], [5.906151744370497, 6.1542362063585125], [3.565541344788514, 9.054171266368137], [20.52944225536098, 9.144598737017962], [29.22311591734176, 5.636763939477668], [19.174030154679645, 8.351431969918771], [1.3154413061929735, 8.704918621895533], [2.2044212215916525, 8.701557633715193], [17.59391139253953, 9.013092788309516], [21.504694037504194, 9.14126515227124], [21.998509660706066, 8.286573565531073], [22.977192489774843, 8.278554879844323], [22.488479812614088, 7.4415025480446175], [23.458685428904563, 7.434399292585006], [21.515795068750407, 7.4504506886277655], [23.950366159656028, 8.268251139315979], [24.427934907781907, 7.424639037513094], [22.94849765189793, 6.618901172869074], [24.931937874986005, 8.264616534068079], [25.394167696271627, 7.413851100189525], [24.926030677046164, 6.624582950549468], [25.845112314322314, 6.592892814466548], [26.35196993393175, 7.4018200712304605], [26.807372255418727, 6.602130370481266], [27.34079212991914, 7.400074612000472], [27.77368777079937, 6.56475749182584], [25.363946988000606, 5.918223627946621], [26.922918022568773, 8.266071686252477], [21.030838085822854, 8.286392685040283], [20.534367696198753, 7.473294338093912], [21.978393002048428, 6.6250918441461275], [23.95482304223826, 6.495936807431351], [5.119740665476204, 6.704389469669141], [6.022531666551925, 7.099669254636133], [6.886576010548264, 6.469014262396834], [6.930120037837836, 7.471097187031965], [7.696025656677468, 6.916310103290573], [7.805982884276326, 7.867487181929025], [8.580838753825567, 7.3065682751355325], [8.330564685788604, 6.08036990168885], [9.26678480604662, 6.527922413498117], [9.516215776305941, 7.476583872218048], [10.25226864807836, 6.789146573337019], [10.513676316864311, 7.6447836788707], [11.268405873116834, 7.019561157688313], [11.500084344217907, 7.817484424166836], [12.248077973947407, 7.22836476988989], [12.423877490829899, 8.133919805975843], [13.101282080611627, 7.467758198566155], [8.830825206188273, 8.30947561839285], [7.932761754879673, 8.845189851313123], [6.131944199798833, 8.069049278649349], [5.219347626294553, 7.686421317175663], [5.345540228920672, 8.631679510425325], [4.4018835064892965, 8.290088552860043], [3.430253614701426, 7.9031598105519585], [22.36563402110505, 5.779700760727089], [29.179416875741545, 6.485060678702117], [16.51572691483231, 9.138214898864819], [16.072466498081955, 8.144898375502093], [15.00563902192529, 8.271211977236385], [10.439158545491285, 9.175612968509146], [28.512351674352214, 9.037044541817226], [27.860255352643566, 8.207733081877628], [18.630276039347812, 9.156709992058525], [14.50508976986059, 9.131040692785492], [14.045602171107882, 8.29565332821699], [14.573447256188668, 7.346393704289634], [16.956410575659426, 7.526667073564882], [24.474443338318707, 9.129302758072345], [14.53595751637241, 6.256209740286183], [20.4024062072543, 5.855626208582707], [12.489460763094467, 9.053754128891756], [10.765086114588438, 5.370642370603971], [12.718533315736627, 5.857911530273131], [26.46149276193771, 9.12855615091039], [27.72858051298049, 5.132445968313754], [20.00429354481641, 6.693223620741649], [25.925172361884822, 8.267756420345044], [23.482626309684925, 9.135164548885998], [28.200787571848963, 7.400839540799186], [20.991286374111688, 6.650677606480804], [20.06921148859563, 8.324147716174853], [29.25734350234812, 8.493959684200671], [9.923662351892833, 5.88019603426117], [19.567159989664006, 9.162814735861684], [7.0642483125013715, 8.441108646609006], [4.635494180033064, 9.2335618556132], [9.855366021002618, 8.311180661168121], [16.992090407087836, 8.397589961253454], [15.45249688799086, 7.461601681692251], [28.61382325101256, 5.049367780663383], [28.33376780851766, 5.919222219578894], [26.340694669159355, 5.88381398398851], [23.274028960071934, 5.759726480191585], [8.652717392213574, 9.257728013184305], [8.272435997444337, 5.315656490357018], [15.389202448798322, 6.573480437816926], [27.2952706829577, 5.878432716854903], [6.585044118999347, 5.715014838798462], [2.9542366855018907, 8.545209549851693], [13.230629822644746, 8.281704639017711], [13.016798642177687, 6.619357873714351], [13.805624909420109, 6.879818150130645], [10.903036270158616, 8.433598126771965], [12.048614119223066, 6.423632154058473], [25.82317225385888, 5.240133376077857], [11.04080537873424, 6.195151817708435], [29.290982710148782, 9.286890863451159], [9.92432579226685, 5.124293204739943], [24.890028441715017, 5.331628354992648], [7.2646664582381675, 9.2813281311586], [0.6051469130631242, 8.686808213782523], [2.5878807602647145, 9.269674120192477], [18.377256839395265, 8.416795604603287], [5.499999999999968, 9.425431804025697], [29.35117393847529, 4.911501654519311], [1.6177925453799917, 9.348524190368114], [0.6563679645059189, 9.371598934431681], [28.518400740114515, 6.771155548979168], [2.5042839387525393, 8.107542680651687], [24.598773420667982, 5.985620809576427], [13.78984173303533, 7.58661475168423], [28.639920472644924, 8.077691590661829], [8.98920448366659, 5.872164377276101], [11.808215838534442, 8.514654891231062], [7.680405413887142, 6.245652617647386]]
        triangles = [[77, 12, 148], [151, 87, 160], [13, 14, 186], [146, 94, 147], [130, 131, 132], [159, 162, 189],
                    [122, 77, 148], [130, 128, 131], [182, 159, 189], [143, 84, 145], [134, 176, 199], [148, 13, 186],
                    [147, 94, 192], [141, 133, 180], [74, 141, 180], [119, 116, 155], [12, 13, 148], [87, 151, 182],
                    [90, 119, 155], [176, 165, 199], [169, 163, 173], [98, 209, 210], [100, 92, 206], [94, 146, 179],
                    [130, 133, 141], [96, 149, 184], [151, 160, 181], [145, 84, 207], [115, 185, 190], [209, 53, 210],
                    [77, 122, 173], [16, 198, 202], [119, 90, 167], [184, 149, 211], [185, 73, 190], [155, 116, 172],
                    [198, 118, 202], [156, 100, 206], [121, 169, 173], [141, 74, 187], [14, 75, 186], [163, 77, 173],
                    [156, 97, 177], [110, 79, 161], [79, 30, 161], [35, 156, 177], [162, 159, 195], [46, 142, 187],
                    [130, 132, 133], [119, 167, 170], [84, 143, 178], [142, 46, 203], [167, 79, 170], [75, 123, 186],
                    [149, 80, 211], [80, 172, 211], [92, 100, 181], [30, 31, 161], [106, 102, 120], [79, 110, 170],
                    [106, 120, 121], [31, 32, 171], [101, 95, 120], [102, 101, 120], [121, 86, 169], [34, 95, 101],
                    [59, 7, 93], [144, 145, 146], [105, 109, 123], [90, 28, 167], [124, 125, 144], [154, 90, 155],
                    [56, 57, 147], [89, 124, 144], [36, 100, 156], [104, 106, 122], [125, 143, 144], [70, 10, 92],
                    [83, 101, 102], [27, 90, 154], [89, 58, 124], [161, 31, 171], [125, 93, 126], [103, 102, 104],
                    [174, 95, 177], [105, 104, 109], [104, 102, 106], [113, 112, 118], [96, 22, 149], [100, 37, 150],
                    [109, 104, 122], [34, 3, 95], [83, 33, 101], [108, 105, 123], [44, 74, 153], [111, 108, 112],
                    [35, 36, 156], [109, 122, 148], [152, 158, 159], [112, 108, 123], [83, 102, 103], [127, 126, 128],
                    [103, 104, 105], [125, 126, 127], [131, 76, 188], [111, 112, 113], [140, 138, 194], [40, 88, 157],
                    [57, 89, 147], [152, 157, 158], [26, 27, 154], [157, 88, 158], [27, 28, 90], [32, 33, 83], [133, 132, 134],
                    [47, 48, 84], [122, 106, 173], [44, 45, 74], [21, 22, 96], [33, 34, 101], [36, 37, 100], [29, 30, 79],
                    [32, 83, 171], [87, 69, 160], [86, 121, 174], [144, 143, 145], [97, 174, 177], [67, 9, 162], [150, 91, 151],
                    [23, 80, 149], [38, 91, 150], [39, 40, 157], [78, 43, 153], [194, 138, 197], [22, 23, 149], [37, 38, 150],
                    [43, 44, 153], [114, 113, 115], [107, 105, 108], [110, 108, 111], [23, 24, 80], [42, 78, 164], [38, 39, 91],
                    [63, 64, 165], [116, 115, 117], [124, 93, 125], [89, 144, 146], [151, 91, 152], [88, 41, 164], [64, 85, 165],
                    [40, 41, 88], [42, 43, 78], [91, 39, 157], [129, 128, 130], [41, 42, 164], [82, 67, 162], [50, 51, 94], [0, 11, 163],
                    [57, 58, 89], [28, 29, 167], [11, 77, 163], [64, 65, 85], [29, 79, 167], [65, 66, 166], [66, 67, 82], [89, 146, 147],
                    [85, 65, 166], [66, 82, 166], [111, 113, 114], [139, 138, 140], [152, 91, 157], [68, 69, 87], [114, 115, 116],
                    [58, 59, 124], [153, 74, 180], [103, 105, 107], [138, 136, 197], [127, 128, 129], [69, 70, 160], [72, 0, 163],
                    [137, 138, 139], [107, 108, 110], [11, 12, 77], [197, 136, 199], [111, 114, 170], [146, 145, 179], [17, 18, 73],
                    [137, 136, 138], [14, 15, 75], [60, 61, 76], [62, 8, 81], [18, 19, 168], [129, 130, 141], [71, 72, 169], [125, 127, 143], [133, 134, 135], [110, 111, 170], [114, 116, 119], [114, 119, 170], [135, 136, 137], [135, 134, 136], [10, 71, 86], [72, 163, 169], [129, 141, 142], [107, 110, 161], [83, 103, 171], [73, 18, 168], [59, 93, 124], [70, 92, 160], [103, 107, 171], [86, 71, 169], [136, 134, 199], [76, 131, 218], [121, 120, 174], [106, 121, 173], [107, 161, 171], [120, 95, 174], [10, 86, 97], [123, 75, 213], [3, 35, 177], [24, 25, 175], [116, 117, 172], [154, 155, 215], [55, 6, 98], [50, 94, 179], [123, 109, 186], [131, 128, 218], [150, 151, 181], [143, 127, 178], [56, 147, 212], [20, 1, 208], [129, 142, 178], [1, 21, 208], [151, 152, 182], [115, 113, 185], [80, 24, 175], [98, 6, 99], [134, 132, 176], [175, 154, 215], [153, 180, 196], [97, 86, 174], [2, 26, 200], [45, 46, 187], [19, 20, 183], [25, 2, 200], [95, 3, 177], [52, 53, 209], [164, 139, 193], [82, 162, 195], [51, 52, 205], [162, 9, 189], [9, 68, 189], [88, 164, 193], [126, 76, 218], [132, 131, 216], [49, 50, 179], [84, 48, 207], [127, 129, 178], [76, 126, 191], [46, 47, 203], [147, 192, 212], [76, 61, 188], [62, 81, 188], [205, 52, 209], [93, 7, 191], [7, 60, 191], [15, 16, 202], [17, 73, 198], [179, 145, 207], [54, 5, 204], [142, 141, 187], [133, 135, 180], [78, 153, 196], [139, 140, 193], [188, 81, 216], [100, 150, 181], [5, 55, 204], [160, 92, 181], [152, 159, 182], [81, 176, 216], [113, 118, 185], [49, 179, 207], [8, 63, 201], [168, 19, 183], [109, 148, 186], [97, 156, 206], [63, 165, 201], [78, 196, 217], [117, 115, 190], [193, 140, 214], [87, 182, 189], [180, 135, 196], [74, 45, 187], [6, 56, 212], [128, 126, 218], [73, 185, 198], [126, 93, 191], [168, 184, 190], [81, 8, 201], [61, 62, 188], [183, 96, 184], [68, 87, 189], [178, 142, 203], [184, 117, 190], [92, 10, 206], [139, 164, 217], [112, 123, 213], [176, 132, 216], [204, 98, 210], [165, 176, 201], [164, 78, 217], [118, 112, 213], [53, 4, 210], [73, 168, 190], [60, 76, 191], [158, 88, 193], [131, 188, 216], [10, 97, 206], [166, 82, 194], [166, 194, 197], [26, 154, 200], [135, 137, 196], [4, 54, 210], [168, 183, 184], [176, 81, 201], [85, 166, 197], [16, 17, 198], [85, 197, 199], [47, 84, 203], [165, 85, 199], [84, 178, 203], [94, 51, 205], [183, 20, 208], [175, 25, 200], [21, 96, 208], [75, 15, 202], [155, 172, 215], [196, 137, 217], [99, 205, 209], [48, 49, 207], [158, 193, 214], [159, 158, 214], [140, 194, 195], [172, 80, 215], [137, 139, 217], [55, 98, 204], [154, 175, 200], [172, 117, 211], [185, 118, 198], [99, 6, 212], [98, 99, 209], [117, 184, 211], [80, 175, 215], [194, 82, 195], [140, 195, 214], [99, 192, 205], [202, 118, 213], [96, 183, 208], [192, 94, 205], [195, 159, 214], 
                    [192, 99, 212], [75, 202, 213], [54, 204, 210]]
        
        print("↑↑↑↑↑")
        point_material_points =[]

        for triangle in triangles:
            point1  = coordenates_triangles[triangle[0]]
            point2  = coordenates_triangles[triangle[1]]
            point3  = coordenates_triangles[triangle[2]]

            center_x = (point1[0] + point2[0] + point3[0]) / 3
            center_y = (point1[1] + point2[1] + point3[1]) / 3
            center_point = (center_x, center_y)

            if point_material_no_points == "1x":
                point_material_points.append(center_point)  

            elif point_material_no_points == "2x":
                center_x = (point1[0] + point2[0] + center_point[0]) / 3
                center_y = (point1[1] + point2[1] + center_point[1]) / 3
                center_point_1 = (center_x, center_y)
                point_material_points.append(center_point_1)  
                center_x = (point2[0] + point3[0] + center_point[0]) / 3
                center_y = (point2[1] + point3[1] + center_point[1]) / 3
                center_point_2 = (center_x, center_y)
                point_material_points.append(center_point_2)  
                center_x = (point3[0] + point1[0] + center_point[0]) / 3
                center_y = (point3[1] + point1[1] + center_point[1]) / 3
                center_point_3 = (center_x, center_y)
                point_material_points.append(center_point_3)  

      

        point_material_name 
        point_material_color 
        point_material_base_mesh 
        point_material_no_points 
        point_material_points


        print("#SE CREAR LOS MODELOS DE PUNTOS EN EL MODELO DE PROYECTO ACTUAL,")
        print("# LUEDO SE PASA POR EL ADMIN QUIN CARGA A LA SCENE y LA BD")

        # 1) Se le dice al ProjectCurrent que debe crear una MP y se le pasa los cuatro datos
        #        el modelo intanaciado lo guarda en una lista
        # 2) el crea un Modelo de pointMaterial,
        #           se guarda la info como argumentos,
        #           se debe guardar la infor en la bd
        #           se crea el itemQGRAPHICS y se agrega a la scena
        #card?
        #admin?
        # 3) el modelo de MP 









        # se agrega la card

        id = self.model_current_project.createMaterialPoint(name=point_material_name ,
                                                    color=point_material_color,
                                                    points=point_material_points)
        model_point_material = self.model_current_project.getModelsPointsMaterials()[id]
        self.createPointsMaterialsCard(model_point_material)








        self.view_menu_pointMaterial.endPointMaterial()


    ###############################################################################
	# ::::::::::::::::::::         MÉTODOS  GENERALES         ::::::::::::::::::::
	###############################################################################

    def configDrawMenuPointMaterial(self):
        models_points_materials = self.model_current_project.getModelsPointsMaterials()
        for id_point_material in models_points_materials:
            print(models_points_materials[id_point_material])
            self.createPointsMaterialsCard(models_points_materials[id_point_material])

    def createPointsMaterialsCard(self, model_point_material):
        controller_card_material_point = ControllerCardMaterialPoint( model_point_material=model_point_material)
        self.view_menu_pointMaterial.addCardMaterialPoint(controller_card_material_point.view_card_material_point)
        controller_card_material_point.signal_hide_show_material_point.connect(self.showHideMaterialPoint)
        controller_card_material_point.signal_delete_material_point.connect(self.deleteMaterialPoint)

        self.list_controller_card.append(controller_card_material_point)

    def getView(self):
        return self.view_menu_pointMaterial
    
    def setListBaseMeshView(self):     
        print("esto toca cambiarlo con la verdadera lista ↓↓↓↓")   
        mesh_data = [["fvdsfgsdg5-55sdf4g5d-000000d0gh00000","malla 1","#236596"],
                     ["fvdsfgsdg5-111111111-5sdf5g4dfghadsf","malla 2","#968698"],
                     ["3333333333-55sdf5d-5sdf5g4dag5adsf","malla 3","#ff5865"]]
        print("↑↑↑↑↑")
        self.view_menu_pointMaterial.setListBaseMesh(mesh_data=mesh_data)
    
    def setBaseMeshView(self, index=-1):        
        self.view_menu_pointMaterial.setBaseMesh(index=index)
    
    def setListNoPointsView(self):  
        self.view_menu_pointMaterial.setListNoPoints()

    def setCurrentProject(self, model_current_project:ModelProjectCurrentOK):  
        self.model_current_project = model_current_project
    
    def setNoPointsView(self, index=-1):        
        self.view_menu_pointMaterial.setNoPoints(index=index)
    
